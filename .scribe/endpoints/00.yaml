name: Endpoints
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/healthcheck
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: Healthcheck
      description: |-
        Check that the service is up. If everything is okay, you'll get a 200 OK response.

        Otherwise, the request will fail with a 400 error, and a response listing the failed services.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"status":"up","services":{"database":"up","redis":"up"}}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
      -
        status: 400
        content: '{"status": "down", "services": {"database": "up", "redis": "down"}}'
        headers: []
        description: 'Service is unhealthy'
        custom: []
    responseFields:
      status:
        name: status
        description: 'The status of this API (`up` or `down`).'
        required: false
        example: null
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      services:
        name: services
        description: 'Map of each downstream service and their status (`up` or `down`).'
        required: false
        example: null
        type: object
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/auth/user
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/users
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get users list'
      description: |2-
         This endpoint allows you to get users list but not using UserResource.
         It's a really useful endpoint, and you should play around 
         with it for a bit.
         <aside class="notice">We mean it; you really should.ðŸ˜•</aside>
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"id":1,"name":"Miller Runolfsson","email":"brau@example.com"},{"id":2,"name":"Lisa Reilly","email":"noemi.kunde@example.net"},{"id":3,"name":"Shad Hirthe","email":"stephan.rolfson@example.com"},{"id":4,"name":"Keely Braun","email":"gabriella.casper@example.com"},{"id":5,"name":"Xzavier Cronin V","email":"kianna.rath@example.com"},{"id":6,"name":"Kristin Wisozk DDS","email":"gleichner.richmond@example.net"},{"id":7,"name":"Miss Shania Dare Jr.","email":"kwintheiser@example.org"},{"id":8,"name":"Brett Kilback","email":"hdoyle@example.org"},{"id":9,"name":"Mr. Raleigh Romaguera DVM","email":"dewayne.padberg@example.com"},{"id":10,"name":"Derick Strosin PhD","email":"allison52@example.com"}]}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":{"id":1,"name":"Testing","email":"testing@example.com"}}'
        headers: []
        description: success
        custom: []
      -
        status: 404
        content: '{"message":"User not found"}'
        headers: []
        description: 'user not found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
